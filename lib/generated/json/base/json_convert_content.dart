// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:first_app/goods/models/goods_sort_entity.dart';
import 'package:first_app/generated/json/goods_sort_entity_helper.dart';
import 'package:first_app/account/models/city_entity.dart';
import 'package:first_app/generated/json/city_entity_helper.dart';
import 'package:first_app/account/models/bank_entity.dart';
import 'package:first_app/generated/json/bank_entity_helper.dart';
import 'package:first_app/test_bank_entity.dart';
import 'package:first_app/generated/json/test_bank_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
		switch (type) {
			case GoodsSortEntity:
				return goodsSortEntityFromJson(data as GoodsSortEntity, json) as T;
			case CityEntity:
				return cityEntityFromJson(data as CityEntity, json) as T;
			case BankEntity:
				return bankEntityFromJson(data as BankEntity, json) as T;
			case TestBankEntity:
				return testBankEntityFromJson(data as TestBankEntity, json) as T;    }
		return data as T;
	}

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case GoodsSortEntity:
				return goodsSortEntityToJson(data as GoodsSortEntity);
			case CityEntity:
				return cityEntityToJson(data as CityEntity);
			case BankEntity:
				return bankEntityToJson(data as BankEntity);
			case TestBankEntity:
				return testBankEntityToJson(data as TestBankEntity);
			}
			return data as T;
		}
  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (GoodsSortEntity).toString()){
			return GoodsSortEntity().fromJson(json);
		}
		if(type == (CityEntity).toString()){
			return CityEntity().fromJson(json);
		}
		if(type == (BankEntity).toString()){
			return BankEntity().fromJson(json);
		}
		if(type == (TestBankEntity).toString()){
			return TestBankEntity().fromJson(json);
		}

		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(<GoodsSortEntity>[] is M){
			return data.map<GoodsSortEntity>((e) => GoodsSortEntity().fromJson(e)).toList() as M;
		}
		if(<CityEntity>[] is M){
			return data.map<CityEntity>((e) => CityEntity().fromJson(e)).toList() as M;
		}
		if(<BankEntity>[] is M){
			return data.map<BankEntity>((e) => BankEntity().fromJson(e)).toList() as M;
		}
		if(<TestBankEntity>[] is M){
			return data.map<TestBankEntity>((e) => TestBankEntity().fromJson(e)).toList() as M;
		}

		throw Exception("not found");
	}

  static M fromJsonAsT<M>(json) {
		if (json is List) {
			return _getListChildType<M>(json);
		} else {
			return _fromJsonSingle<M>(json) as M;
		}
	}
}